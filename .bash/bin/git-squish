#!/usr/bin/env bash


#TODO: https://gist.github.com/jayvdb/9b41677f00065dbd94cc02446fc5ba34
# https://stackoverflow.com/questions/62284501/git-rebase-generate-todo-then-proceed-later

# `git merge-base --fork-point <rebaseBranch> <thrashingBranch>` to find the effective forking point between the branches
# `git rebase --onto <rebaseBranch> $fork_point` to effectively rebase ontop of the commit.
# `rebase -i` creates the file '.\.git\rebase-merge\git-rebase-todo'
# Format is '<command> <short hash> <commit summary>'

#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#

function main {
  local thrashingBranch="$1"
  local rebaseBranch="$2"
  local rollbackTagName="_squish_${thrashingBranch}_$(date +%s)"

  echo "Attempting to squash/fixup all changes between '${rebaseBranch}'($(git rev-parse --short ${rebaseBranch})) and '${thrashingBranch}'($(git rev-parse --short ${thrashingBranch}))"
  local commits_to_squash=($(git log --format=format:" %h " --cherry-pick ${rebaseBranch}...${thrashingBranch} | tac))

  git tag --force --create-reflog --message "Pre-squish of branch '${rebaseBranch}'...'${thrashingBranch}'\n" "${rollbackTagName}"
  for ((i=0; i<${#commits_to_squash[@]}; i++)); do
    local current_commit=${commits_to_squash[$i]}
    local previous_commit=${commits_to_squash[$((i-1))]}

    local files_in_current_commit=($(git show --pretty="" --name-only ${current_commit}))

    if [ ${#files_in_current_commit[@]} -eq 1 ]; then
      local file_in_current_commit=${files_in_current_commit[0]}
      if [ -n "${previous_commit}" ]; then
        local files_in_previous_commit=($(git show --pretty="" --name-only ${previous_commit}))
        if [[ " ${files_in_previous_commit[@]} " =~ " ${file_in_current_commit}" ]]; then
          #echo -ne 'F'
          echo "Perform fixup rebase for commit '${current_commit}'"
          #git rebase --autostash --interactive --empty=drop --no-keep-empty --exec "git commit --fixup=${current_commit}" ${current_commit}^
        else
          :
          #echo -ne 'n'
        fi
      fi
    else
      :
      #echo -ne '.'
    fi
  done
  echo -ne '\n\n'

  # Done fixing up commits. Show the current log
#  git log --oneline "${rebaseBranch}...${thrashingBranch}"
#  PS3="Does the log correct? "
#  local options=("Yes" "No")
#  select opt in "${options[@]}"; do
#    case $opt in
#      "Yes")
#        echo " "
#        echo "Okay. Removing rollback tag."
#        #git tag --delete ${rollbackTagName}
#        break
#        ;;
#      "No")
#        echo " "
#        if [ " $(git rev-parse ${thrashingBranch}) " != " $(git rev-parse ${rollbackTagName}) " ]; then
#          echo "Discarding fixups. Resetting '${thrashingBranch}'"
#          git reset --hard ${rollbackTagName}
#        fi
#        #git tag --delete ${rollbackTagName}
#        echo "Branch '${thrashingBranch}' points to $(git rev-parse --short ${thrashingBranch})"
#        break
#        ;;
#      *)
#        echo "Invalid option $REPLY"
#        ;;
#    esac
#  done
}

main $@